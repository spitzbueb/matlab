A=[1 2 3 4; 2 3 4 1; 3 4 1 2;4 1 2 3]

A =

     1     2     3     4
     2     3     4     1
     3     4     1     2
     4     1     2     3

B=[5 4 3 2; 4 3 2 5; 3 2 5 4; 2 5 4 3]

B =

     5     4     3     2
     4     3     2     5
     3     2     5     4
     2     5     4     3

b=[1; 2; 3; 4]

b =

     1
     2
     3
     4

det(A)

ans =

   160

det(B)

ans =

  -224

A^(-1)

ans =

   -0.2250    0.0250    0.0250    0.2750
    0.0250    0.0250    0.2750   -0.2250
    0.0250    0.2750   -0.2250    0.0250
    0.2750   -0.2250    0.0250    0.0250

B^(-1)

ans =

    0.2679    0.0179    0.0179   -0.2321
    0.0179    0.0179   -0.2321    0.2679
    0.0179   -0.2321    0.2679    0.0179
   -0.2321    0.2679    0.0179    0.0179

A*(A^(-1))

ans =

    1.0000    0.0000         0    0.0000
   -0.0000    1.0000    0.0000   -0.0000
   -0.0000    0.0000    1.0000   -0.0000
   -0.0000         0   -0.0000    1.0000

(A^(-1))*A

ans =

    1.0000   -0.0000   -0.0000   -0.0000
    0.0000    1.0000    0.0000         0
         0    0.0000    1.0000   -0.0000
    0.0000   -0.0000   -0.0000    1.0000

B*(B^(-1))

ans =

    1.0000         0         0         0
    0.0000    1.0000    0.0000   -0.0000
         0         0    1.0000    0.0000
         0    0.0000    0.0000    1.0000

(B^(-1))*B

ans =

    1.0000    0.0000         0         0
         0    1.0000         0    0.0000
         0    0.0000    1.0000    0.0000
         0   -0.0000    0.0000    1.0000

A_transp = A'

A_transp =

     1     2     3     4
     2     3     4     1
     3     4     1     2
     4     1     2     3

B_tranp = B'

B_tranp =

     5     4     3     2
     4     3     2     5
     3     2     5     4
     2     5     4     3

A_tranps * A
{??? Undefined function or variable 'A_tranps'.
} 
A_transp * A

ans =

    30    24    22    24
    24    30    24    22
    22    24    30    24
    24    22    24    30

B_transp * B
{??? Undefined function or variable 'B_transp'.
} 
B_tranp * B

ans =

    54    48    46    48
    48    54    48    46
    46    48    54    48
    48    46    48    54

A*B

ans =

    30    36    38    36
    36    30    36    38
    38    36    30    36
    36    38    36    30

A*(B^(-1))

ans =

   -0.5714    0.4286    0.4286    0.4286
    0.4286   -0.5714    0.4286    0.4286
    0.4286    0.4286   -0.5714    0.4286
    0.4286    0.4286    0.4286   -0.5714

B*A

ans =

    30    36    38    36
    36    30    36    38
    38    36    30    36
    36    38    36    30

B*(A^(-1))

ans =

   -0.4000    0.6000    0.6000    0.6000
    0.6000   -0.4000    0.6000    0.6000
    0.6000    0.6000   -0.4000    0.6000
    0.6000    0.6000    0.6000   -0.4000

(A(4,:) * B(:,2)) + (B_tranp(:,3) * b)
{??? Error using ==> mtimes
Inner matrix dimensions must agree.
} 
(A(4,:) * B(:,2))

ans =

    38

B_tranp(:,3) * b
{??? Error using ==> mtimes
Inner matrix dimensions must agree.
} 
(A(4,:) * B(:,2)) + (B_tranp(3;:) * b)
??? (A(4,:) * B(:,2)) + (B_tranp(3;:) * b)
                                  |
{Error: Unbalanced or unexpected parenthesis or bracket.
} 
A(4,:) * B(:,2) + B_tranp(3;:) * b
??? A(4,:) * B(:,2) + B_tranp(3;:) * b
                               |
{Error: Unbalanced or unexpected parenthesis or bracket.
} 
A(4,:) * B(:,2) + B_tranp(3,:) * b

ans =

    76

x = b * A^(-1)
{??? Error using ==> mtimes
Inner matrix dimensions must agree.
} 
x = A^(-1) * b

x =

    1.0000
    0.0000
         0
    0.0000

y = B^(-1) * b

y =

   -0.5714
    0.4286
    0.4286
    0.4286

C = rand(10)

C =

    0.8147    0.1576    0.6557    0.7060    0.4387    0.2760    0.7513    0.8407    0.3517    0.0759
    0.9058    0.9706    0.0357    0.0318    0.3816    0.6797    0.2551    0.2543    0.8308    0.0540
    0.1270    0.9572    0.8491    0.2769    0.7655    0.6551    0.5060    0.8143    0.5853    0.5308
    0.9134    0.4854    0.9340    0.0462    0.7952    0.1626    0.6991    0.2435    0.5497    0.7792
    0.6324    0.8003    0.6787    0.0971    0.1869    0.1190    0.8909    0.9293    0.9172    0.9340
    0.0975    0.1419    0.7577    0.8235    0.4898    0.4984    0.9593    0.3500    0.2858    0.1299
    0.2785    0.4218    0.7431    0.6948    0.4456    0.9597    0.5472    0.1966    0.7572    0.5688
    0.5469    0.9157    0.3922    0.3171    0.6463    0.3404    0.1386    0.2511    0.7537    0.4694
    0.9575    0.7922    0.6555    0.9502    0.7094    0.5853    0.1493    0.6160    0.3804    0.0119
    0.9649    0.9595    0.1712    0.0344    0.7547    0.2238    0.2575    0.4733    0.5678    0.3371

D = C.^2

D =

    0.6638    0.0248    0.4300    0.4985    0.1925    0.0762    0.5644    0.7068    0.1237    0.0058
    0.8205    0.9421    0.0013    0.0010    0.1456    0.4620    0.0651    0.0647    0.6903    0.0029
    0.0161    0.9162    0.7210    0.0767    0.5860    0.4292    0.2560    0.6631    0.3425    0.2817
    0.8343    0.2356    0.8723    0.0021    0.6323    0.0264    0.4887    0.0593    0.3022    0.6071
    0.3999    0.6404    0.4607    0.0094    0.0349    0.0142    0.7937    0.8635    0.8412    0.8724
    0.0095    0.0201    0.5742    0.6781    0.2399    0.2484    0.9202    0.1225    0.0817    0.0169
    0.0776    0.1779    0.5522    0.4828    0.1985    0.9211    0.2994    0.0386    0.5734    0.3236
    0.2991    0.8386    0.1538    0.1006    0.4177    0.1159    0.0192    0.0630    0.5681    0.2203
    0.9168    0.6276    0.4297    0.9029    0.5032    0.3425    0.0223    0.3795    0.1447    0.0001
    0.9310    0.9206    0.0293    0.0012    0.5696    0.0501    0.0663    0.2240    0.3224    0.1137

max(D)

ans =

    0.9310    0.9421    0.8723    0.9029    0.6323    0.9211    0.9202    0.8635    0.8412    0.8724

help max
 MAX    Largest component.
    For vectors, MAX(X) is the largest element in X. For matrices,
    MAX(X) is a row vector containing the maximum element from each
    column. For N-D arrays, MAX(X) operates along the first
    non-singleton dimension.
 
    [Y,I] = MAX(X) returns the indices of the maximum values in vector I.
    If the values along the first non-singleton dimension contain more
    than one maximal element, the index of the first one is returned.
 
    MAX(X,Y) returns an array the same size as X and Y with the
    largest elements taken from X or Y. Either one can be a scalar.
 
    [Y,I] = MAX(X,[],DIM) operates along the dimension DIM. 
 
    When X is complex, the maximum is computed using the magnitude
    MAX(ABS(X)). In the case of equal magnitude elements, then the phase
    angle MAX(ANGLE(X)) is used.
 
    NaN's are ignored when computing the maximum. When all elements in X
    are NaN's, then the first one is returned as the maximum.
 
    Example: If X = [2 8 4   then max(X,[],1) is [7 8 9],
                     7 3 9]
 
        max(X,[],2) is [8    and max(X,5) is [5 8 5
                        9],                   7 5 9].
 
    See also <a href="matlab:help min">min</a>, <a href="matlab:help median">median</a>, <a href="matlab:help mean">mean</a>, <a href="matlab:help sort">sort</a>.

    Overloaded methods:
       <a href="matlab:help timeseries/max">timeseries/max</a>
       <a href="matlab:help ordinal/max">ordinal/max</a>

    Reference page in Help browser
       <a href="matlab:doc max">doc max</a>

median(D)

ans =

    0.5318    0.6340    0.4453    0.0886    0.3288    0.1821    0.2777    0.1732    0.3325    0.1670

max(D,dim)
{??? Undefined function or variable 'dim'.
} 
max(max(D))

ans =

    0.9421

min(min(D))

ans =

   1.4166e-04

median(median(D))

ans =

    0.3033

diary off
